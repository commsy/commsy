//>>built
require({cache:{"url:cbtree/templates/cbtreeNode.html":'<div class="dijitTreeNode" role="presentation">\n\t<div data-dojo-attach-point="rowNode" class="dijitTreeRow dijitInline" role="presentation">\n\t\t<div data-dojo-attach-point="indentNode" class="dijitInline"></div>\n\t\t<img src="${_blankGif}" alt="" data-dojo-attach-point="expandoNode"class="dijitTreeExpando" role="presentation" />\n\t\t<span data-dojo-attach-point="expandoNodeText" class="dijitExpandoText" role="presentation"></span>\n\t\t<span data-dojo-attach-point="checkBoxNode" class="cbtreeCheckBox" role="presentation"></span>\n\t\t<span data-dojo-attach-point="contentNode" class="dijitTreeContent" role="presentation">\n\t\t\t<img src="${_blankGif}" alt="" data-dojo-attach-point="iconNode" class="dijitIcon dijitTreeIcon" role="presentation"/>\n\t\t\t<span data-dojo-attach-point="labelNode" class="dijitTreeLabel" role="treeitem" tabindex="-1" aria-selected="false"></span>\n\t\t</span>\n\t</div>\n\t<div data-dojo-attach-point="containerNode" class="dijitTreeContainer" role="presentation" style="display: none;"></div>\n</div>\n'}});
define("cbtree/Tree","dojo/_base/array,dojo/_base/declare,dojo/_base/event,dojo/_base/lang,dojo/DeferredList,dojo/dom-construct,dojo/text!./templates/cbtreeNode.html,dijit/_Container,dijit/registry,dijit/Tree,./CheckBox,./models/_dndSelector,require".split(","),function(i,j,l,c,m,n,o,p,q,k,r,s,t){var u=j([k._TreeNode],{templateString:o,moduleName:"cbTree/_TreeNode",_checkBox:null,_toggle:!0,_widget:null,constructor:function(a){var b={type:r,target:"INPUT",mixin:null,postCreate:null},d={multiState:null,
checked:void 0,value:"on"};if(a=a.widget)c.mixin(d,a.args),c.mixin(b,a);b.args=d;this._toggle=c.isFunction(b.type.prototype.toggle);this._widget=b},_createCheckBox:function(a){var b=this.tree.model.getItemState(this.item),d=b.checked,b=b.enabled,e=this._widget,f=e.args;if(void 0!==d&&(f.multiState=a,f.checked=d,f.value=this.label,c.isFunction(e.mixin)&&c.hitch(this,e.mixin)(f),this._checkBox=new e.type(f)))c.isFunction(this._widget.postCreate)&&c.hitch(this._checkBox,this._widget.postCreate)(this),
n.place(this._checkBox.domNode,this.checkBoxNode,"replace");this._checkBox&&(this.isExpandable?(this.tree.branchReadOnly||!b)&&this._checkBox.set("readOnly",!0):(this.tree.leafReadOnly||!b)&&this._checkBox.set("readOnly",!0))},_getCheckedAttr:function(){if(this._checkBox)return this.tree.model.getChecked(this.item)},_set_checked_Attr:function(a){this._checkBox&&this._checkBox.set("checked",a)},_setCheckedAttr:function(a){if(this._checkBox)return this.tree.model.setChecked(this.item,a)},_getEnabledAttr:function(){return this.tree.model.getEnabled(this.item)},
_set_enabled_Attr:function(a){this._checkBox.set("readOnly",!a)},_setEnabledAttr:function(a){return this.tree.model.setEnabled(this.item,a)},_toggleCheckBox:function(){var a;this._checkBox&&(this._toggle?a=this._checkBox.toggle():(a=this._checkBox.get("checked"),a="mixed"==a?!0:!a),this.tree.model.setChecked(this.item,a));return a},destroy:function(){this._checkbox&&(this._checkbox.destroy(),delete this._checkbox);this.inherited(arguments)},postCreate:function(){var a=this.tree,b=null;!0===a.checkBoxes&&
this._createCheckBox(a._multiState);a._hasStyling&&a._iconAttr&&(b=a.get("icon",this.item))&&this.set("_icon_",b);this.set("tooltip",this.title);this.inherited(arguments)},setChildItems:function(a){var b=this.tree,d=b.model,e=[],c=this.getChildren();i.forEach(c,function(a){p.prototype.removeChild.call(this,a)},this);this.defer(function(){i.forEach(c,function(a){if(!a._destroyed&&!a.getParent()){b.dndController.removeTreeNode(a);var c=d.getIdentity(a.item),e=b._itemNodesMap[c];1==e.length?delete b._itemNodesMap[c]:
(c=i.indexOf(e,a),-1!=c&&e.splice(c,1));a.destroyRecursive()}})});this.state="LOADED";a&&0<a.length?(this.isExpandable=!0,i.forEach(a,function(a){var c=d.getIdentity(a),g=b._itemNodesMap[c],h;if(g)for(var f=0;f<g.length;f++)if(!g[f]||g[f]._beingDestroyed)g.splice(f,1),0==g.length&&delete b._itemNodesMap[c];else if(!g[f].getParent()){h=g[f];h.set("indent",this.indent+1);break}h||(h=this.tree._createTreeNode({item:a,tree:b,isExpandable:d.mayHaveChildren(a),label:b.getLabel(a),tooltip:b.getTooltip(a),
ownerDocument:b.ownerDocument,dir:b.dir,lang:b.lang,textDir:b.textDir,indent:this.indent+1}),g?g.push(h):b._itemNodesMap[c]=[h]);this.addChild(h);(this.tree.autoExpand||this.tree._state(h))&&e.push(b._expandNode(h))},this),i.forEach(this.getChildren(),function(a){a._updateLayout()})):(b._collapseNode(this),this.isExpandable=!1);this._setExpando&&this._setExpando(!1);this._updateItemClasses(this.item);if(this==b.rootNode)(a=this.tree.showRoot?this:this.getChildren()[0])?(a.setFocusable(!0),b.lastFocused=
a):b.domNode.setAttribute("tabIndex","0");a=new m(e);this.tree._startPaint(a);return a}});return j([k],{branchIcons:!0,branchReadOnly:!1,checkBoxes:!0,leafReadOnly:!1,nodeIcons:!0,dndController:s,moduleName:"cbTree/Tree",_multiState:!0,_checkedAttr:"",_customWidget:null,_eventAttrMap:null,_dojoRequired:{min:{major:1,minor:8},max:{major:1,minor:9}},_assertVersion:function(){if(dojo.version){var a=10*dojo.version.major+dojo.version.minor,b=999,d=0;if(this._dojoRequired&&(void 0!==this._dojoRequired.min&&
(d=10*this._dojoRequired.min.major+this._dojoRequired.min.minor),void 0!==this._dojoRequired.max&&(b=10*this._dojoRequired.max.major+this._dojoRequired.max.minor),a<d||a>b))throw Error(this.moduleName+"::_assertVersion(): invalid dojo version.");}else throw Error(this.moduleNmae+"::_assertVersion(): unable to determine dojo version.");},_createTreeNode:function(a){a.widget=this._customWidget;if(this._hasStyling&&this._icon)a.icon=this._icon;return new u(a)},_onCheckBoxClick:function(a,b,d){var c=
a.item;this._publish("checkbox",{item:c,node:a,state:b,evt:d});this.onCheckBoxClick(c,a,d);this.onClick(a.item,a,d);this.focusNode(a);l.stop(d)},_onClick:function(a,b){if(b.target.nodeName==a._widget.target){var c=a._checkBox.get("checked");this.model.setChecked(a.item,c);this._onCheckBoxClick(a,c,b)}else this.inherited(arguments)},_onItemChange:function(a,b,d){if(b=this._eventAttrMap[b]){var e=this._itemNodesMap[this.model.getIdentity(a)],f={};e&&(f[b.attribute]=b.value?c.isFunction(b.value)?c.hitch(this,
b.value)(a,b.attribute,d):b.value:d,i.forEach(e,function(a){a.set(f)},this))}},_onKeyPress:function(a){if(!a.altKey){var b=q.getEnclosingWidget(a.target);c.isString(a.charOrCode)&&" "==a.charOrCode&&b._toggleCheckBox()}this.inherited(arguments)},_onLabelChange:function(a,b){this.mapEventToAttr(a,b,"label")},_setWidgetAttr:function(a){var b=a;if(c.isString(a))return this._setWidgetAttr({type:a});if(c.isObject(a)&&a.hasOwnProperty("type"))if(b=a.type,c.isFunction(b))if((b=b.prototype)&&"undefined"!==
typeof b.checked){if(c.isFunction(b.get)&&c.isFunction(b.set)){this._customWidget=a;return}b="Widget does not support get() and/or set()"}else b="widget MUST have a 'checked' property";else{if(c.isString(b)&&~b.indexOf("/")){var d=this;t([b],function(b){a.type=b;d._setWidgetAttr(a)});return}b="argument is not a valid module id"}else b="Object is missing required 'type' property";throw Error(this.moduleName+"::_setWidgetAttr(): "+b);},create:function(){this._assertVersion();this.inherited(arguments)},
destroy:function(){this.model=null;this.inherited(arguments)},getIconStyle:function(a,b){var c=this.model.mayHaveChildren(a),e=this.inherited(arguments)||{};c?this.branchIcons||(e.display="none"):this.nodeIcons||(e.display="none");return e},mixinEvent:function(a,b,c){this.model.isItem(a)&&this._eventAttrMap[b]&&(this._onItemChange(a,b,c),this.onEvent(a,b,c))},onCheckBoxClick:function(){},onEvent:function(){},postMixInProperties:function(){this._eventAttrMap={};this.inherited(arguments)},postCreate:function(){var a=
this.model;if(this.model){if(!0===this.checkBoxes){if(!this._modelOk())throw Error(this.moduleName+"::postCreate(): model does not support getChecked() and/or setChecked().");this._multiState=a.multiState;this._checkedAttr=a.checkedAttr;this.mapEventToAttr(null,this._checkedAttr||"checked","_checked_");a.validateData()}this.connect(a,"onLabelChange","_onLabelChange");this.mapEventToAttr(null,a.get("enabledAttr"),"_enabled_");this.mapEventToAttr(null,a.get("labelAttr"),"label");this.inherited(arguments)}else throw Error(this.moduleName+
"::postCreate(): no model was specified.");},mapEventToAttr:function(a,b,d,e){c.isString(b)&&c.isString(d)&&b.length&&d.length&&(a&&delete this._eventAttrMap[a],this._eventAttrMap[b]={attribute:d,value:e})},_modelOk:function(){return this.model.getChecked&&c.isFunction(this.model.getChecked)&&this.model.setChecked&&c.isFunction(this.model.setChecked)?!0:!1}})});