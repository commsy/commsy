security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords

    password_hashers:
        # This is the new default encoder used by all migrated users
        App\Entity\Account:
            algorithm: bcrypt

        # This is the legacy encoder supporting MD5 until the user is migrated
        legacy_encoder:
            algorithm: md5
            encode_as_base64: false
            iterations: 1

        # Rest API JWT / Metrics
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: plaintext

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        commsy_user_provider:
            id: App\Security\UserProvider

        in_memory:
            memory:
                users:
                    api_read: { password: '%env(API_READ_SECRET)%', roles: ['ROLE_API_READ'] }
                    api_write: { password: '%env(API_WRITE_SECRET)%', roles: ['ROLE_API_WRITE'] }

        memory_metrics:
            memory:
                users:
                    commsy: { password: '%env(API_METRICS_SECRET)%' }
        
        jwt:
            lexik_jwt: ~

    role_hierarchy:
        ROLE_API_WRITE: ROLE_API_READ

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        metrics:
            pattern: ^/api/metrics
            stateless: true
            http_basic:
                realm: Secured Area
            provider: memory_metrics

        api_v2_login:
            pattern: ^/api/v2/login
            stateless: true
            json_login:
                check_path: /api/v2/login_check
                provider: in_memory
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                
        api_v2_wopi:
            pattern: ^/api/v2/wopi
            stateless: true
            provider: jwt
            jwt:
                authenticator: App\Security\WOPIJWTAuthenticator

        api_v2:
            pattern: ^/api/v2(?!/doc$)
            stateless: true
            provider: in_memory
            jwt: ~

        main:
            user_checker: App\Security\UserChecker
            logout:
                path: app_logout
            provider: commsy_user_provider
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
                - App\Security\LdapAuthenticator
                - App\Security\ShibbolethAuthenticator
            entry_point: App\Security\AuthenticationEntryPoint
            switch_user:
                role: CAN_SWITCH_USER
                provider: commsy_user_provider
            access_denied_handler: App\Security\AccessDeniedHandler

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v2/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/v2/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/dashboard, roles: IS_AUTHENTICATED }
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon
