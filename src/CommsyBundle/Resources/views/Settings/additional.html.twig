{% extends 'CommsyBundle:Settings:settings.html.twig' %}

{% form_theme form 'CommsyBundle:Form:uikit_horizontal_layout.html.twig' %}

{% block content %}
    <div class="uk-grid">

        <div class="uk-width-medium-4-4">
            <div class="uk-panel uk-panel-box uk-panel-box-primary">
                <div class="uk-panel-teaser cs-panel-teaser-primary">
                    <div class="uk-flex uk-flex-middle uk-flex-space-between">
                        <div>{{ 'Additional Configuration'|trans({}, 'settings') }}</div>
                    </div>
                </div>

                <div>
                    {{ form_start(form) }}
                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Structural auxilaries'|trans({}, 'settings') }}</h1>
                            <div style="margin-bottom: 25px;"></div>
                            {{ form_widget(form.structural_auxilaries) }}
                        </div>

                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Tasks'|trans({}, 'settings') }}</h1>
                            <div style="margin-bottom: 25px;">{{ 'Tasks text'|trans({}, 'settings') }}</div>
                            {{ form_widget(form.tasks.status) }}
                            {{ form_widget(form.tasks.status_option) }}
                            <ul style="list-style-type:none" id='additional_status_list' data-prototype="{{ form_widget(form.tasks.additional_status.vars.prototype)|e('html_attr')}}">
                                {% for status in form.tasks.additional_status %}
                                    <li class='uk-form-row'>{{ form_widget(status) }}</li>
                                {% endfor %}
                            </ul>
                        </div>

                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Template'|trans({}, 'settings') }}</h1> 
                            <div style="margin-bottom: 25px;">{{ 'Template text'|trans({}, 'settings') }}</div>
                            {{ form_widget(form.template) }}
                        </div>

                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Terms'|trans({}, 'settings') }}</h1> 
                            <div style="margin-bottom: 25px;">{{ 'Terms text'|trans({}, 'settings') }}</div>
                            {{ form_widget(form.terms) }}
                        </div>
                    {{ form_end(form) }}
                </div>

            </div>
        </div>

{#         <div class="uk-width-medium-1-4">
            <div class="uk-panel uk-panel-box uk-panel-box-primary">
                <div class="uk-panel-teaser cs-panel-teaser-primary">
                    <div class="uk-flex uk-flex-middle uk-flex-space-between">
                        <div>{{ 'Information'|trans({}, 'settings') }}</div>
                    </div>
                </div>

                <div>
                    {{ 'Useful information'|trans({}, 'settings') }}
                </div>
            </div>
        </div> #}
        
    </div>
    <script>

    window.onload = function(){
        var savedStatusTexts = [];
        var statusList = document.getElementById('additional_status_list');
        var statusCount = statusList.getElementsByTagName('input').length + 3;      // "+3" for three default status 
        var newStatusTextField = document.getElementById('additional_settings_tasks_status');
        var newStatusButton = document.getElementById('additional_settings_tasks_status_option');
        newStatusButton.parentNode.className = "";
        newStatusButton.parentNode.style.display = 'inline';
        newStatusButton.disabled = newStatusTextField.value.length < 1;
        newStatusButton.onclick = function(){
            if(savedStatusTexts.indexOf(newStatusTextField.value) < 0){
                addStatus(statusList, statusCount, newStatusTextField.value);
                savedStatusTexts.push(newStatusTextField.value);
                newStatusTextField.value = '';
                statusCount++;
            }
            else{
                alert("Der Status '"+newStatusTextField.value+"' existiert bereits. Bitte wÃ¤hlen Sie einen anderen Namen aus.");
            }
        }
        newStatusTextField.oninput = function(){
            newStatusButton.disabled = newStatusTextField.value.length < 1;
        }
    };

    function addStatus(listElement, currentCount, statusText){
        var prototype = listElement.getAttribute('data-prototype');
        var newInput = prototype.replace(/__name__/g, currentCount);
        newInput = newInput.replace(/input/g, 'input value="'+statusText+'"');
        var newListItem= document.createElement('li');
        newListItem.innerHTML = newInput;
        var newLabel = newListItem.getElementsByTagName('label')[0];
        var newInput = newListItem.getElementsByTagName('input')[0];
        var newInputCopy = newInput.cloneNode(true);
        var superfluousDiv = newInput.parentNode;
        var containerDiv = superfluousDiv.parentNode; 

        containerDiv.removeChild(superfluousDiv); 
        containerDiv.appendChild(newInputCopy);

        if(newLabel){
            newLabel.className = "uk-form-label";
        }
        containerDiv.className = 'uk-form-row';

        newListItem.innerHTML = newListItem.innerHTML.replace('<br>', '');

        listElement.appendChild(newListItem);
    }

    var languageSelection = document.getElementById('additional_settings_terms_language');
    var ckeditor = CKEDITOR.instances['additional_settings_terms_agb_text_editor'];

    // similar ckeditor events: 'loaded', 'instanceCreated'
    ckeditor.on('instanceReady', function(e){
 
        this.on('blur', function(e){
            document.getElementById('additional_settings_terms_agb_text_' + languageSelection.value).value = this.getData();
        });

        // This is just a workaround needed because the blur event above apparently does not fire when directly clicking the submit button after typing text into the CKEdtor
        document.getElementsByClassName('uk-form-horizontal')[0].onsubmit=function(){           
            document.getElementById('additional_settings_terms_agb_text_' + languageSelection.value).value = ckeditor.getData();
        }        

        languageSelection.onchange=function(e){
            ckeditor.setData(document.getElementById('additional_settings_terms_agb_text_' + this.value).value);         
        };

        // initially display data from DB once the CKEditor is ready
        ckeditor.setData(document.getElementById('additional_settings_terms_agb_text_' + languageSelection.value).value);  
      
    });
    </script>
{% endblock content %}
