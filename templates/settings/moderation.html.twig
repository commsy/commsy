{% extends 'base/settings.html.twig' %}

{% form_theme form 'form/uikit_horizontal_layout.html.twig' %}

{% block content %}
    <div class="uk-grid">

        <div class="uk-width-medium-4-4">
            <div class="uk-panel uk-panel-box uk-panel-box-primary">
                <div class="uk-panel-teaser cs-panel-teaser-primary">
                    <div class="uk-flex uk-flex-middle uk-flex-space-between">
                        <div>{{ 'Moderation support configuration'|trans({}, 'settings') }}</div>
                    </div>
                </div>

                <div>
                    {{ form_start(form) }}
                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Homenotice'|trans({}, 'settings') }}</h1>
                            <div style="margin-bottom: 25px;">{{ 'Homenotice text'|trans({}, 'settings') }}</div>
                            {{ form_widget(form.homenotice) }}
                        </div>

                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Usage notes'|trans({}, 'settings') }}</h1> 
                            <div style="margin-bottom: 25px;">{{ 'Usage notes text'|trans({}, 'settings') }}</div>
                            {{ form_widget(form.usernotice) }}
                        </div>

                        <div class="uk-panel uk-panel-box" style="margin-bottom: 20px;">
                            <h1 class='uk-panel-title'>{{ 'Email configuration'|trans({}, 'settings') }}</h1> 
                            <div style="margin-bottom: 25px;">{{ 'Email configuration text'|trans({}, 'settings') }}</div>
                            {{ form_widget(form.email_configuration) }}
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
        
{#         <div class="uk-width-medium-1-4">
            <div class="uk-panel uk-panel-box uk-panel-box-primary">
                <div class="uk-panel-teaser cs-panel-teaser-primary">
                    <div class="uk-flex uk-flex-middle uk-flex-space-between">
                        <div>{{ 'Information'|trans({}, 'settings') }}</div>
                    </div>
                </div>

                <div>
                    {{ 'Useful information'|trans({}, 'settings') }}
                </div>
            </div>
        </div> #}
        
    </div>
    <script>
    var settings_page = 'moderation_settings';
    var subForm = 'email_configuration';
    var subFormName = settings_page + "_" + subForm;
    var emailConfiguration = document.getElementById(subFormName);
    var emailTemplateSelection = document.getElementById(subFormName + '_array_mail_text_rubric');

    // FIXME: not safe! Should use key instead of index! (cant guarantee that this specific form will always have index 1!)
    var form = document.forms[1];

    //var editors = emailConfiguration.getElementsByClassName('cke');

    //var germanEditor = editors[0];
    //var englishEditor = editors[1];

    var germanEditor = document.getElementById('moderation_settings_email_configuration_moderation_mail_body_de');
    var englishEditor = document.getElementById('moderation_settings_email_configuration_moderation_mail_body_en');

   // HTML5 alternative to "onkeyup": "oninput"
    germanEditor.onkeyup = function(e){  
        var fieldName = settings_page + "[" + subForm + "][" + emailTemplateSelection.value.toLowerCase() + "_de]";
        form.elements[fieldName].value = germanEditor.value;
    }

    englishEditor.onkeyup = function(e){     
        var fieldName = settings_page + "[" + subForm + "][" + emailTemplateSelection.value.toLowerCase() + "_en]";     
        form.elements[fieldName].value = englishEditor.value;
    }

    emailTemplateSelection.onchange=function(e){

        var templateOption = emailTemplateSelection.value;

        if(templateOption.substring(0, 4) === 'MAIL'){
            var fieldName = (settings_page + "[" + subForm + "][" + templateOption).toLowerCase();
            
            germanEditor.value = form.elements[fieldName + "_de]"].value;
            englishEditor.value = form.elements[fieldName + "_en]"].value;

            germanEditor.parentNode.parentNode.style.display = '';
            englishEditor.parentNode.parentNode.style.display = '';
        }
        else{
            germanEditor.parentNode.parentNode.style.display = 'none';
            englishEditor.parentNode.parentNode.style.display = 'none';
        }
    };

    // load and save usage notices
    var rubricSelection = document.getElementById('moderation_settings_usernotice_array_info_text_rubric');
    var titleField = document.getElementById('moderation_settings_usernotice_moderation_title');
    var ckeditor = CKEDITOR.instances['moderation_settings_usernotice_message'];
    var hiddenTitleField = 'moderation_settings_usernotice_title_';
    var hiddenTextField = 'moderation_settings_usernotice_description_';

    // similar ckeditor events: 'loaded', 'instanceCreated'
    ckeditor.on('instanceReady', function(e){

        titleField.onblur = function(e){
            document.getElementById(hiddenTitleField + rubricSelection.value).value = this.value; 
        };
 
        this.on('blur', function(e){
            document.getElementById(hiddenTextField + rubricSelection.value).value = this.getData();
        });

        // This is just a workaround needed because the blur event above apparently does not fire when directly clicking the submit button after typing text into the CKEdtor
        document.getElementsByClassName('uk-form-horizontal')[0].onsubmit=function(){
            document.getElementById(hiddenTextField + rubricSelection.value).value = ckeditor.getData();
        }

        rubricSelection.onchange=function(e){
            titleField.value = document.getElementById(hiddenTitleField + this.value).value;
            ckeditor.setData(document.getElementById(hiddenTextField + this.value).value);
        };

        // initially display data from DB once the CKEditor is ready
        titleField.value = document.getElementById(hiddenTitleField + rubricSelection.value).value;
        ckeditor.setData(document.getElementById(hiddenTextField + rubricSelection.value).value);
      
    });
    </script>
{% endblock content %}
