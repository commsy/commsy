<?php

// Copyright (c) 2009 by Frank Wolf <frankwolf@mediabird.net>, Fabian Gebert <fabiangebert@mediabird.net>

// DB UPGRADE AND MIGRATION SCRIPT EXECUTE FROM PATH moodle/mod/studynotes/
header('Content-type: text/plain;');

//include config structure
include ('../config/config_default.php');

//set up config
//database connection info
MediabirdConfig::$database_hostname = "localhost";
MediabirdConfig::$database_username = "mediabirdcommsy";
MediabirdConfig::$database_password = "mediabirdcommsy";
MediabirdConfig::$database_name     = "mediabirdcommsy";
MediabirdConfig::$database_table_prefix = "";

//start of platform related links
$wwwroot = "commsy.php";


//include other db objects
include ('../server/dbo.php');
include ('../server/db_mysql.php');


//check for config
if(class_exists("MediabirdConfig")) {
	echo "Config found\n";
}
else {
	die ("Could not find config.");
}

//database connection
$mediabirdDb=new MediabirdDboMySql();
if(!$mediabirdDb->connect()) {
	die ("Could not connect to data base.");
}

$query = "SHOW COLUMNS FROM ".MediabirdConfig::tableName('User')." LIKE 'pic_url'";
$result = mysql_query($query);
if(mysql_num_rows($result)>0) {
	echo "Database has already been migrated\n";
	exit();
}



function getUsersMaximalTopicAccessMask($userId, $topicId){
	global $mediabirdDb;
	
	$rights_query = "SELECT mask FROM ".MediabirdConfig::tableName('Right')." WHERE topic=$topicId AND group_id=ANY
	(SELECT group_id FROM ".MediabirdConfig::tableName('Membership')." WHERE user_id=$userId AND active=1)";

	$mask = 0;
	if ($right_records = $mediabirdDb->getRecordSet($rights_query)) {
		foreach($rightRecords as $right_record){
			$mask |= intval($right_record->mask);
		}
	}
	return $mask;
}



/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/


function createRenameTablesColumns(){
	echo "Creating new tables and columns\n";
	
	$queries 
	  = array(
	  // NEW DB TABLES
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/

	  "CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('CardTag')." (
		  `id` int(11) NOT NULL auto_increment,
		  `card_id` int(11) NOT NULL,
		  `tag_id` int(11) NOT NULL,
		  `created` datetime NOT NULL,
		  `modified` datetime NOT NULL,
		  PRIMARY KEY  (`id`)
		)",
		
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('CardContent')." (
		  `id` int(11) NOT NULL auto_increment,
		  `locked_by` int(11) unsigned NOT NULL,
		  `locked_time` datetime NOT NULL,
		  `topic_id` int(11) unsigned NOT NULL,
		  `card_id` int(11) unsigned NOT NULL,
		  `content` text,
		  `modifier` int(11) unsigned NOT NULL,
		  `modified` datetime NOT NULL,
		  PRIMARY KEY  (`id`)
		) ",
		
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('Star')." (
		id INT(11) unsigned NOT NULL auto_increment,
			answer_id INT(11) unsigned NOT NULL,
			question_id INT(11) unsigned NOT NULL,
			user_id INT(11) unsigned NOT NULL,
			created datetime NOT NULL,
			modified datetime NOT NULL,
			CONSTRAINT  PRIMARY KEY (id)) ",
		
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('Vote')." (
			id INT(11) unsigned NOT NULL auto_increment,
			answer_id INT(11) unsigned NOT NULL,
			user_id INT(11) unsigned NOT NULL,
			created datetime NOT NULL,
			modified datetime NOT NULL,
			CONSTRAINT  PRIMARY KEY (id)
			) ",
		
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('Session')." (
			id INT(11) unsigned NOT NULL auto_increment,
			user_id INT(11) unsigned NOT NULL,
			card_id INT(11) unsigned NOT NULL,
			editing TINYINT(1) unsigned NOT NULL,
			modified INT(11) unsigned NOT NULL,
			CONSTRAINT  PRIMARY KEY (id),
			UNIQUE KEY `user_id` (`user_id`)
			) ",
			
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('Tag')." (
			id INT(11) unsigned NOT NULL auto_increment,
			color VARCHAR(6) NOT NULL DEFAULT '00FF66', 
			title VARCHAR(30) NOT NULL DEFAULT '',
			CONSTRAINT  PRIMARY KEY (id)
			) ",
			
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('TagColor')." (
			id INT(11) unsigned NOT NULL auto_increment,
			user_id INT(11) unsigned NOT NULL,
			tag_id INT(11) unsigned NOT NULL,
			color VARCHAR(6) NOT NULL DEFAULT '',
			display_text TINYINT(1) unsigned NOT NULL,
			CONSTRAINT  PRIMARY KEY (id)
			) ",
	  
		"CREATE TABLE IF NOT EXISTS ".MediabirdConfig::tableName('UploadAccess')." (
			id INT(10) unsigned NOT NULL auto_increment,
			user_id INT(11) unsigned NOT NULL,
			upload_id INT(11) unsigned NOT NULL,
			mask INT(11) unsigned NOT NULL,
			created datetime NOT NULL,
			modified datetime NOT NULL,
			CONSTRAINT  PRIMARY KEY (id)
			) ",
	  // NEW DB COLUMS
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
		//cards
		"ALTER TABLE  ".MediabirdConfig::tableName('Card')." ADD `content_type` INT( 11 ) NOT NULL ",
		"ALTER TABLE  ".MediabirdConfig::tableName('Card')." ADD `content_id` INT( 11 ) NOT NULL ",
		"ALTER TABLE  ".MediabirdConfig::tableName('Card')." ADD `content_index` INT( 11 ) NOT NULL",
        "ALTER TABLE  ".MediabirdConfig::tableName('Card')."  ADD `modifier` INT( 11 ) NOT NULL ",
        //markers
        "ALTER TABLE ".MediabirdConfig::tableName('Marker')."  ADD `card_type` INT( 11 ) NOT NULL",
        "ALTER TABLE ".MediabirdConfig::tableName('Marker')."  ADD `topic_id` INT( 11 ) NOT NULL ",
	  	//relation
 	    "ALTER TABLE ".MediabirdConfig::tableName('Relation')." ADD `topic_id` INT( 11 ) NOT NULL",
	   	"ALTER TABLE ".MediabirdConfig::tableName('Relation')." ADD `user_id` INT( 11 ) NOT NULL",
       
        //relation_answers
        "ALTER TABLE ".MediabirdConfig::tableName('Answer')." ADD `question_id` INT( 11 ) NOT NULL",
        //relation_links
        "ALTER TABLE ".MediabirdConfig::tableName('Link')." ADD `type_num` INT( 11 ) NOT NULL ",
        "ALTER TABLE ".MediabirdConfig::tableName('Link')." ADD `user_id` INT( 11 ) NOT NULL ",
        //relation_questions
        "ALTER TABLE ".MediabirdConfig::tableName('Question')." ADD `question_mode` INT( 11 ) NOT NULL",
        //rights
        "ALTER TABLE ".MediabirdConfig::tableName('Right')." ADD `created` datetime NOT NULL default '0000-00-00 00:00:00'",
        "ALTER TABLE ".MediabirdConfig::tableName('Right')." ADD `modified` datetime NOT NULL default '0000-00-00 00:00:00'",
        "ALTER TABLE ".MediabirdConfig::tableName('Right')." ADD `user_id` INT( 11 ) NOT NULL ",
        //topics
        "ALTER TABLE ".MediabirdConfig::tableName('Topic')." ADD `modifier` INT( 11 ) NOT NULL ",
        //uploads
        "ALTER TABLE ".MediabirdConfig::tableName('Upload')." ADD `password` VARCHAR( 255 ) NULL default null",
        "ALTER TABLE ".MediabirdConfig::tableName('Upload')." ADD `title` VARCHAR( 60 ) NULL default null",
        // users
        "ALTER TABLE ".MediabirdConfig::tableName('User')." ADD `modified` datetime NOT NULL default '0000-00-00 00:00:00'",
        "ALTER TABLE ".MediabirdConfig::tableName('User')." ADD `pic_url` TEXT CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL",
	 	"ALTER TABLE ".MediabirdConfig::tableName('User')." ADD `mask` int (11) NOT NULL default '0'",

	  	// rename tables
		"RENAME TABLE ".MediabirdConfig::tableName('flashcards')."  TO ".MediabirdConfig::tableName('Flashcard'),
	  
        // renaming columns
        "ALTER TABLE ".MediabirdConfig::tableName('Card')."  CHANGE `topic` `topic_id` BIGINT( 11 ) UNSIGNED NOT NULL",
        "ALTER TABLE ".MediabirdConfig::tableName('Marker')."  CHANGE `card` `card_id` BIGINT( 11 ) UNSIGNED NOT NULL  ",
        "ALTER TABLE ".MediabirdConfig::tableName('Question')." CHANGE `question` `question` VARCHAR( 1536 ) NULL DEFAULT NULL",
        "ALTER TABLE ".MediabirdConfig::tableName('Link')." CHANGE `link` `url` MEDIUMTEXT CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL",
        "ALTER TABLE ".MediabirdConfig::tableName('Right')." CHANGE `topic` `topic_id` BIGINT( 11 ) UNSIGNED NOT NULL  ",
		"ALTER TABLE ".MediabirdConfig::tableName('Flashcard')." CHANGE `lasttimeanswered` `answer_time` BIGINT( 20 ) UNSIGNED NOT NULL ",
		"ALTER TABLE ".MediabirdConfig::tableName('Flashcard')." ADD `created` datetime NOT NULL default '0000-00-00 00:00:00'",
		"ALTER TABLE ".MediabirdConfig::tableName('Flashcard')." ADD `modified` datetime NOT NULL default '0000-00-00 00:00:00'"
			  
		);
		$i = 0;
		foreach($queries as $query){
			$i++;
			if (!mysql_query($query)){
				echo $query;
				echo "\n";
				echo "echo while executing query:\n$query\n".mysql_error()."\n\n";
				echo "query number: $i \n";
				exit;
			}
		}
		echo "Completed table and column creation\n";
}
createRenameTablesColumns();


/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/

echo "Migrating data\n";

studynotes_migrate_data_05($wwwroot);

echo "Data migration completed\n";

/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/


// ENTFERNUNG VON TABELLEN  ENTFERNEN VON TABELLEN //

function removeTablesColumns(){
	echo "Removing orphaned tables and columns\n";
	
	$queries 
	  = array(
	  // remove tables
	  "DROP TABLE ".MediabirdConfig::tableName('feeds'),
  	  "DROP TABLE ".MediabirdConfig::tableName('feed_messages'),
  	  "DROP TABLE ".MediabirdConfig::tableName('feed_messages_status'),
  	  "DROP TABLE ".MediabirdConfig::tableName('feed_subscriptions'),
  	  //"DROP TABLE ".MediabirdConfig::tableName('Flashcard'),
  	  "DROP TABLE ".MediabirdConfig::tableName('Group'),
  	  "DROP TABLE ".MediabirdConfig::tableName('Membership'),
  	  "DROP TABLE ".MediabirdConfig::tableName('prerequisites'),
	  "DROP TABLE ".MediabirdConfig::tableName('relation_translations'),

	  
	  
	  
	  //remove columns
	  "ALTER TABLE ".MediabirdConfig::tableName('Card')." DROP `revision`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Card')." DROP `locked_by`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Card')." DROP `locked_time`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Card')." DROP `level_num`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Card')." DROP `content`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Card')." DROP `user_id`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Marker')." DROP `data`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Marker')." DROP `notify`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Marker')." DROP `revision`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Right')." DROP `group_id`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Topic')." DROP `language`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Topic')." DROP `type`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Topic')." DROP `user_id`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Topic')." DROP `revision`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Upload')." DROP `topic_id`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('User')." DROP `overlay_coords`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Flashcard')." DROP `marker`;",
      "ALTER TABLE ".MediabirdConfig::tableName('Flashcard')." DROP `num`;",
	  "ALTER TABLE ".MediabirdConfig::tableName('Flashcard')." DROP `markedforrepetition`;"
		  
	  );		
	  $j = 0;
	  foreach($queries as $query){
	  	$j++;
			if (!mysql_query($query)){
				echo $query;
				echo "\n";
				echo ("echo while executing query:\n$query\n".mysql_error()."\n\n");
				echo "query: $j \n";
				exit;
			}
		}
	echo "Table cleanup completed\n";
}

removeTablesColumns();
    
    
$mediabirdDb->disconnect();
echo "Migration done\n";


function studynotes_migrate_data_05($wwwroot = null) {
	global $mediabirdDb;
	// handle cards
	$cardRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('Card', true));
	if($cardRecords){
		foreach($cardRecords as $cardRecord){
			$cardContentRecord = (object)null;
			$cardContentRecord->locked_by = 0;
			$cardContentRecord->locked_time = 0;
			$cardContentRecord->topic_id = $cardRecord->topic_id;
			$cardContentRecord->card_id = $cardRecord->id;
			$cardContentRecord->content = $cardRecord->content;
			$cardContentRecord->modifier = $cardRecord->user_id;
			$cardContentRecord->modified = $cardRecord->modified;			

			if($mediabirdDb->timestamp($cardRecord->modified) == 0){
				$cardContentRecord->modified = $mediabirdDb->datetime(time());
			}
			
			if(!$cardContentRecord->id = $mediabirdDb->insertRecord(MediabirdConfig::tableName('CardContent', true), $cardContentRecord)){
				echo("Could not create content entry for for card id $cardRecord->id");
				return false;
			}

			$cardRecord->content_type = 0;
			$cardRecord->content_id = $cardContentRecord->id;
			$cardRecord->content_index = 0;
			
			if($mediabirdDb->timestamp($cardRecord->created) == 0){
				$cardRecord->created = $mediabirdDb->datetime(time());
			}
			
			$cardRecord->modified = $cardContentRecord->modified;
			$cardRecord->modifier = $cardContentRecord->modifier;
				
			if(!$mediabirdDb->updateRecord(MediabirdConfig::tableName('Card', true), $cardRecord)){
				echo("Could not update card record $cardRecord->id");
				return false;
			}
		}
	}
	unset($cardRecords);
	
	// handle markers
	/***********************************************************************************************************/
	/***********************************************************************************************************/
	/***********************************************************************************************************/


	$markerRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('Marker', true));
	if($markerRecords) {
		foreach($markerRecords as $markerRecord){
			$markerRecord->card_type = 0;
			
			// determine topic where marker has been inserted
			$cardRecord = (object)null;
			if(!$cardRecord = $mediabirdDb->getRecord(MediabirdConfig::tableName('Card',true),"id = $markerRecord->card_id")) {
				echo("Invalid data in marker record $markerRecord->id");
				return false;
			}
			$markerRecord->user_id = $cardRecord->user_id;
			$markerRecord->topic_id = $cardRecord->topic_id;
			
			if($mediabirdDb->timestamp($markerRecord->created) == 0){
				$markerRecord->created =  $mediabirdDb->datetime(time());
			}
	
			if($mediabirdDb->timestamp($markerRecord->modified) == 0){
				$markerRecord->modified =  $mediabirdDb->datetime(time());
			}
			
			if(!in_array($markerRecord->tool,array("question","reference","repetition"))) {
				//delete marker
				$mediabirdDb->deleteRecords(MediabirdConfig::tableName('Marker', true), "id=$markerRecord->id");
			}
			else {
				//migrate data
				
				if($markerRecord->tool=="question" || $markerRecord->tool=="repetition"){
					//creation of relation
					$relationRecord = (object)null;
					$relationRecord->marker_id = $markerRecord->id;
					$relationRecord->topic_id = $markerRecord->topic_id;
					$relationRecord->user_id = 0; // if user_id of relation object is set to zero corresponding relation is shared
			
					$relationRecord->created = $relationRecord->modified = $mediabirdDb->datetime(time());
					
					//set tool to "question"
					$markerRecord->tool = "question";
					
					// collect marker data
					$markerData = (object)null;
					$markerData = json_decode($markerRecord->data);
						
					// instantiate object
					$questionRecord = (object)null;
					$questionRecord->question = null;
					$questionRecord->question_mode = 4; //relatedQuestion, default when converting repetition marker
					
					
					if(!empty($markerData)) {
						// questionMode = 1 <=> 'annotation' answer of an annotation is question of new (06) relation object featuring content of annotations in R06
						if(property_exists($markerData,"questionMode")){
							if(in_array($markerData->questionMode,array(0,1,2,3))) {
								if($markerData->questionMode == 1){
									if(property_exists($markerData,'answer')){
										$questionRecord->question = $markerData->answer;
										unset($markerData->answer);
									}
								}
								else{
									if(property_exists($markerData,'question')){
										$questionRecord->question = $markerData->question;
									}
								}
								
								$questionRecord->question_mode = intval($markerData->questionMode);
							}
						}
					}
							
						
					$questionRecord->user_id = $markerRecord->user_id;
					$questionRecord->created = $markerRecord->created;
					$questionRecord->modified = $markerRecord->modified;
						
					if(!$questionRecord->id = $mediabirdDb->insertRecord(MediabirdConfig::tableName('Question',true), $questionRecord)) {
						echo("Could not create question object for marker $markerRecord->id");
						return false;
					}
						
					// creation and insertion of 'relations' entry that connects relation_question and marker
					$relationRecord->relation_id = $questionRecord->id;
					$relationRecord->relation_type = "question";
						
						
					if(!$relationRecord->id = $mediabirdDb->insertRecord(MediabirdConfig::tableName('Relation',true),$relationRecord)) {
						echo("Could not create relation object for question $questionRecord->id");
						return false;
					}
	
					// if an answer is available, create a corresponding relation_answer entry
					if($questionRecord->question && $markerData->answer){
						$answerRecord = (object)null;
						$answerRecord->answer = $markerData->answer;
						$answerRecord->question_id = $questionRecord->id;
						$answerRecord->user_id = $markerRecord->user_id;
						$answerRecord->created = $markerRecord->created;
						$answerRecord->modified = $markerRecord->modified;
	
						if(!$mediabirdDb->insertRecord(MediabirdConfig::tableName('Answer', true), $answerRecord)) {
							echo("Could not create answer object for question $questionRecord->id");
							return false;
						}
					}
				}
				else if($markerRecord->tool=="reference"){
					//get relations
					$relationRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('Relation', true), "marker_id=$markerRecord->id AND relation_type='link'");
					
					if($relationRecords) {
						//get first relation
						$relationRecord = array_shift($relationRecords);
						
						//work with the remaining record
						$linkId = $relationRecord->relation_id;
						
						//drop all remaining relations
						if(count($relationRecords)>0) {
							$idsToDrop = array();
							foreach($relationRecords as $relationRecord) {
								$idsToDrop []= $relationRecord->id;
							}
							
							$select = "id IN (".join(",",$idsToDrop).")";
							$mediabirdDb->deleteRecords(MediabirdConfig::tableName('Relation', true),$select);
						}

						$linkRecord = $mediabirdDb->getRecord(MediabirdConfig::tableName('Link', true), "id=$linkId");
						if($linkRecord) {
							//copy link for current user
							$linkRecord = clone $linkRecord;
							
							//default link type (external)
							$linkRecord->type_num = 0;
							
							//set link type to platform if prefix matches wwwroot
							if(isset($wwwroot) && stripos($linkRecord->url, $wwwroot) === 0) {
								$linkRecord->type_num = MediabirdLinkTypeConstants::platform;
							}
							
							$linkRecord->user_id = $markerRecord->user_id;
							unset($linkRecord->id);
							
							if(!$linkRecord->id = $mediabirdDb->insertRecord(MediabirdConfig::tableName('Link', true),$linkRecord)) {
								echo("Could not create link for marker $markerRecord->id");
								return false;
							}
							
							//update relation record
							$relationRecord->relation_id = $linkRecord->id;
							$relationRecord->topic_id = $markerRecord->topic_id;
					
							if(!$mediabirdDb->updateRecord(MediabirdConfig::tableName('Relation', true),$relationRecord)) {
								echo("Could not update relation $relationRecord->id");
								return false;
							}
						}
					}
				}
				//update marker record
				unset($markerRecord->data);
				if(!$mediabirdDb->updateRecord(MediabirdConfig::tableName('Marker',true), $markerRecord)) {
					echo("Could not update marker record $markerRecord->id");
					return false;
				}	
			}
		}
	}
	unset($markerRecords);
	
	

	// handle topics
	/***********************************************************************************************************/
	/***********************************************************************************************************/
	/***********************************************************************************************************/

	$topicRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('Topic', true));
	if($topicRecords) {
		foreach($topicRecords as $topicRecord){
			$topic = (object)null;
			$topic->id = $topicRecord->id;
			$topic->modifier = $topicRecord->user_id;
	
			// create right set for owner
	
			$owner = $topicRecord->user_id;
	
			$rightRecord = (object)null;
			$rightRecord->user_id = $owner;
			$rightRecord->topic_id = $topicRecord->id;
			$rightRecord->mask = 1023;
			$rightRecord->created = $mediabirdDb->datetime(time());
			$rightRecord->modified = $mediabirdDb->datetime(time());
			$rightRecord->group_id = 0;
	
			if(!$mediabirdDb->insertRecord(MediabirdConfig::tableName('Right',true), $rightRecord)){
				echo("Could not create owner rights for topic $topicRecord->id");
				return false;
			}
	
			//retrieve users the topic was shared with
				
			$userRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('User', true)," active=1 AND id IN (
				SELECT user_id FROM ".MediabirdConfig::tableName('Membership')." WHERE active IN (1,3) AND group_id IN (
					SELECT group_id FROM ".MediabirdConfig::tableName('Right')." WHERE mask>0 AND topic_id=$topicRecord->id
				)
			)");

			if($userRecords){
				foreach($userRecords as $userRecord){
					$mask = studynotes_user_topic_access($userRecord->id, $topicRecord->id);

					if($mask > 0) {
						$rightRecord = (object)null;
						$rightRecord->user_id = $userRecord->id;
						$rightRecord->topic_id = $topicRecord->id;
						$rightRecord->mask = $mask;
						$rightRecord->created = $mediabirdDb->datetime(time());
						$rightRecord->modified = $mediabirdDb->datetime(time());
						$rightRecord->group_id = 0;
							
						if($userRecord->id != $owner){
							if(!$mediabirdDb->insertRecord(MediabirdConfig::tableName('Right',true), $rightRecord)) {
								echo("Could not create right record for user $userRecord->id");
							}
						}
					}
				}
			}
			unset($userRecords);
			
			//set modifier to same value as user_id
			$topicRecord->modifier = $topicRecord->user_id;
			
			//check if created and modified values are correct
			$createdTime = $mediabirdDb->timestamp($topicRecord->created); 
			$modifiedTime = $mediabirdDb->timestamp($topicRecord->modified);

			if($createdTime == 0) {
				$firstDay2009 = 1230804000;
				$topicRecord->created = $mediabirdDb->datetime($firstDay2009);
			}
			if($modifiedTime == 0) {
				$topicRecord->modified = $topicRecord->created;
			}
			
			if(!$mediabirdDb->updateRecord(MediabirdConfig::tableName('Topic',true), $topicRecord)) {
				echo("Could not update topic record $topicRecord->id");
			} 
		}
	}
	unset($topicRecords);
	
	//delete settings from users
	$userRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('User', true));

	if($userRecords){
		foreach($userRecords as $userRecord){
			if($mediabirdDb->timestamp($userRecord->modified)==0) {
				$userRecord->modified==$mediabirdDb->datetime(time());
			}
			$userRecord->settings = null;				
			if(!$mediabirdDb->updateRecord(MediabirdConfig::tableName('User',true), $userRecord)) {
				echo("Could not reset settings for user $userRecord->id");
			}
		}
	}
	unset($userRecords);

	if(!$mediabirdDb->deleteRecords(MediabirdConfig::tableName('Right', true), "group_id <> 0")) {
		echo("Could not delete orphaned rights");
		return false;
	}

	if(!$mediabirdDb->deleteRecords(MediabirdConfig::tableName('Link', true), "user_id = 0")) {
		echo("Could not delete orphaned links");
		return false;
	}

	if(!$mediabirdDb->deleteRecords(MediabirdConfig::tableName('Flashcard', true),"1=1")) {
		echo("Could not delete orphaned flashcards");
		return false;
	}
	
	return true;
}

function studynotes_user_topic_access($userId, $topicId){
	global $mediabirdDb;
	
	$select= "topic_id=$topicId AND group_id IN
		(SELECT group_id FROM ".MediabirdConfig::tableName('Membership')." WHERE user_id=$userId AND active=1)";
	
	$mask = 0;
	if ($rightRecords = $mediabirdDb->getRecords(MediabirdConfig::tableName('Right',true),$select,'','mask')) {
		foreach($rightRecords as $rightRecord){
			$mask |= intval($rightRecord->mask);
		}
	}
	return $mask;
}


?>
